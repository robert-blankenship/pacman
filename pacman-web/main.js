// Generated by CoffeeScript 1.10.0
(function() {
  var DrawableElement, Space, Tile, Wall, drawMaze, drawPellet, getTileHeight, getTileWidth, init,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DrawableElement = (function() {
    function DrawableElement() {}

    return DrawableElement;

  })();

  Space = (function(superClass) {
    extend(Space, superClass);

    function Space(consumableAvailable) {
      this.consumableAvailable = consumableAvailable;
    }

    return Space;

  })(DrawableElement);

  Wall = (function(superClass) {
    extend(Wall, superClass);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    return Wall;

  })(DrawableElement);

  Tile = (function() {
    function Tile(row, column, skin) {
      this.row = row;
      this.column = column;
      this.skin = skin;
    }

    return Tile;

  })();

  getTileHeight = function(maze, ctx) {
    var tilesY;
    tilesY = 1 + maze.map(function(tile) {
      return tile.row;
    }).reduce(function(rowCurrent, rowNext) {
      console.log(rowCurrent, rowNext);
      if (rowNext > rowCurrent) {
        return rowNext;
      } else {
        return rowCurrent;
      }
    });
    return ctx.canvas.height / tilesY;
  };

  getTileWidth = function(maze, ctx) {
    var tilesX;
    tilesX = 1 + maze.map(function(tile) {
      return tile.column;
    }).reduce(function(columnCurrent, columnNext) {
      if (columnNext > columnCurrent) {
        return columnNext;
      } else {
        return columnCurrent;
      }
    });
    return ctx.canvas.width / tilesX;
  };

  drawPellet = function(tile, maze, ctx) {
    var tileHeight, tileWidth;
    tileWidth = getTileWidth(maze, ctx);
    tileHeight = getTileHeight(maze, ctx);
    ctx.fillStyle = "yellow";
    return ctx.arc(tile.column * tileWidth + tileWidth / 2, tile.row * tileHeight + tileHeight / 2, 5, 2 * Math.PI);
  };

  drawMaze = function(maze, ctx) {
    var tileHeight, tileWidth;
    tileWidth = getTileWidth(maze, ctx);
    tileHeight = getTileHeight(maze, ctx);
    maze.forEach(function(tile) {
      ctx.fillStyle = tile.skin instanceof Space ? (tile.consumableAvailable ? drawPellet(tile, maze, ctx) : void 0, "blue") : tile.skin instanceof Wall ? "black" : void 0;
      return ctx.fillRect(tile.column * tileWidth, tile.row * tileHeight, tileWidth, tileHeight);
    });
    return ctx.stroke();
  };

  init = function() {
    var canvas, context, socket;
    canvas = document.getElementById('game-canvas');
    context = canvas.getContext('2d');
    socket = new WebSocket("ws://localhost:8000");
    return socket.onmessage = function(message) {
      var json, maze;
      json = JSON.parse(message.data);
      console.log(json);
      if (json.maze !== void 0) {
        maze = json.maze.map(function(tile) {
          if (tile.skin === 'space') {
            return new Tile(tile.row, tile.column, new Space(tile.consumableAvailable));
          } else if (tile.skin === 'wall') {
            return new Tile(tile.row, tile.column, new Wall());
          }
        });
      }
      return drawMaze(maze, context);
    };
  };

  init();

}).call(this);
