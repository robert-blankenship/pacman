// Generated by CoffeeScript 1.10.0
(function() {
  var DrawableElement, KeyCodes, Movable, Space, Tile, Wall, drawMaze, drawMovables, drawPellets, getTileHeight, getTileWidth, init,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DrawableElement = (function() {
    function DrawableElement() {}

    return DrawableElement;

  })();

  Space = (function(superClass) {
    extend(Space, superClass);

    function Space(consumableAvailable) {
      this.consumableAvailable = consumableAvailable;
    }

    return Space;

  })(DrawableElement);

  Wall = (function(superClass) {
    extend(Wall, superClass);

    function Wall() {
      return Wall.__super__.constructor.apply(this, arguments);
    }

    return Wall;

  })(DrawableElement);

  Tile = (function() {
    function Tile(row, column, skin) {
      this.row = row;
      this.column = column;
      this.skin = skin;
    }

    return Tile;

  })();

  Movable = (function() {
    function Movable(movableData) {
      this.x = movableData.x;
      this.y = movableData.y;
    }

    return Movable;

  })();

  getTileHeight = function(maze, ctx) {
    var tilesY;
    tilesY = maze.map(function(tile) {
      return tile.row;
    }).reduce(function(rowCurrent, rowNext) {
      if (rowNext > rowCurrent) {
        return rowNext;
      } else {
        return rowCurrent;
      }
    }, 0);
    return ctx.canvas.height / (tilesY + 1);
  };

  getTileWidth = function(maze, ctx) {
    var tilesX;
    tilesX = maze.map(function(tile) {
      return tile.column;
    }).reduce(function(columnCurrent, columnNext) {
      if (columnNext > columnCurrent) {
        return columnNext;
      } else {
        return columnCurrent;
      }
    }, 0);
    return ctx.canvas.width / (tilesX + 1);
  };

  drawPellets = function(maze, ctx) {
    var tileHeight, tileWidth;
    tileWidth = getTileWidth(maze, ctx);
    tileHeight = getTileHeight(maze, ctx);
    return maze.forEach(function(tile) {
      if (tile.skin.consumableAvailable) {
        ctx.beginPath();
        ctx.fillStyle = "yellow";
        ctx.arc(tile.column * tileWidth + tileWidth / 2, tile.row * tileHeight + tileHeight / 2, 3, 0, 2 * Math.PI);
        return ctx.fill();
      }
    });
  };

  drawMaze = function(maze, ctx) {
    var tileHeight, tileWidth;
    tileWidth = getTileWidth(maze, ctx);
    tileHeight = getTileHeight(maze, ctx);
    return maze.forEach(function(tile) {
      ctx.beginPath();
      ctx.fillStyle = tile.skin instanceof Space ? "blue" : tile.skin instanceof Wall ? "black" : void 0;
      ctx.fillRect(tile.column * tileWidth, tile.row * tileHeight, tileWidth, tileHeight);
      return ctx.stroke();
    });
  };

  drawMovables = function(movables, maze, ctx) {
    var tileWidth;
    tileWidth = getTileWidth(maze, ctx);
    return movables.forEach(function(movable) {
      ctx.beginPath();
      ctx.fillStyle = "yellow";
      ctx.arc(tileWidth * movable.x, tileWidth * movable.y, 10, 0, 2 * Math.PI);
      return ctx.fill();
    });
  };

  KeyCodes = (function() {
    function KeyCodes() {}

    KeyCodes.w = 119;

    KeyCodes.a = 97;

    KeyCodes.s = 115;

    KeyCodes.d = 100;

    KeyCodes.Up = 38;

    KeyCodes.Down = 40;

    KeyCodes.Left = 37;

    KeyCodes.Right = 39;

    return KeyCodes;

  })();

  init = function() {
    var canvas, context, defeatSong, maze, movables, openingSong, siren, socket, victorySong;
    canvas = document.getElementById('game-canvas');
    context = canvas.getContext('2d');
    socket = new WebSocket("ws://localhost:8000");
    maze = [];
    movables = [];
    siren = new Audio('../sounds/siren-loop.ogg');
    openingSong = new Audio('../sounds/opening-song.mp3');
    openingSong.play();
    openingSong.onended = function() {
      siren.loop = true;
      return siren.play();
    };
    defeatSong = new Audio('../sounds/death.mp3');
    victorySong = new Audio('../sounds/intermission.mp3');
    window.addEventListener("keydown", function(ev) {
      console.log("player pressed " + ev.keyCode);
      return socket.send((function() {
        switch (ev.keyCode) {
          case KeyCodes.w:
            return "North";
          case KeyCodes.Up:
            return "North";
          case KeyCodes.a:
            return "West";
          case KeyCodes.Left:
            return "West";
          case KeyCodes.s:
            return "South";
          case KeyCodes.Down:
            return "South";
          case KeyCodes.d:
            return "East";
          case KeyCodes.Right:
            return "East";
        }
      })());
    });
    return socket.onmessage = function(message) {
      var json;
      json = JSON.parse(message.data);
      if (json.maze !== void 0) {
        maze = json.maze.map(function(tile) {
          if (tile.skin === 'space') {
            return new Tile(tile.row, tile.column, new Space(tile.consumableAvailable));
          } else if (tile.skin === 'wall') {
            return new Tile(tile.row, tile.column, new Wall());
          }
        });
      }
      if (json.movables !== void 0) {
        movables = json.movables.map(function(movableData) {
          return new Movable(movableData);
        });
      }
      if (json.state !== void 0) {
        switch (json.state) {
          case "player-playing":
            null;
            break;
          case "player-won":
            socket.close();
            siren.pause();
            victorySong.play();
            break;
          case "player-lost":
            socket.close();
            siren.pause();
            defeatSong.play();
        }
      }
      context.clearRect(0, 0, canvas.width, canvas.height);
      drawMaze(maze, context);
      drawPellets(maze, context);
      return drawMovables(movables, maze, context);
    };
  };

  init();

}).call(this);
